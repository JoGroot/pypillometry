.. currentmodule:: pypillometry.pupildata

Overview
========

The package is divided into separate sub-modules that solve specific subtasks (pre-processing, baseline estimation etc). The functions in these modules operate on plain :py:mod:`numpy.array`'s or standard Python-structures. While these functions can be used directly, an easier approach is to use the class :py:class:`~pypillometry.pupildata.PupilData` which wraps these functions in a convenient way. Each object of class :py:class:`~pypillometry.pupildata.PupilData` represents one dataset of pupillometric data, including time, signal and external events (trial onsets, stimulus presentations, responses, etc). By calling the member functions of such an object, the corresponding function from one of the sub-modules is called using the appropriate arguments.

Reading data
------------

So far, reading in data is not part of the :py:mod:`pypillometry`-package. This is because the format of the eyetracker-files will vary depending on the setup of the eyetracker (there are many ways to represent event-triggers) and the actual model of the eyetracker. Python provides excellent functionality to parse text-based datafiles and we therefore give guidance how to use these tools rather than trying to implement that functionality in our package.

There are many ways in which pupillometric data can be read into Python. For example, Eyelink's `ASC-format <http://download.sr-support.com/dispdoc/page25.html>`_ generated by the EDF2ASC conversion tool outputs space-separated data that can be easily loaded using the `I/O functionality of the pandas package <https://pandas.pydata.org/pandas-docs/stable/reference/io.html>`_ . 

Data is input into :mod:`pypillometry` using the :func:`constructor <pypillometry.pupildata.PupilData.__init__>` of the :class:`~pypillometry.pupildata.PupilData` object.

However, data that has been converted into :class:`PupilData`-objects can be easily saved and restored (using :mod:`shelve`).

.. code-block:: python

    d=PupilData(...) # create PupilData object after manually loading data
    # save the dataset into a shelve-file
    d.write_file("dataset.pd")
    
    # load it from the file
    d2=PupilData.from_file("dataset.pd")
    


:ref:`An example for importing data from Eyelink EDF-files </docs/importdata.ipynb>`


Pipeline-based processing
-------------------------

:py:mod:`pypillometry` implements a pipeline-like approach where each operation executed on a :class:`~pypillometry.pupildata.PupilData`-object returns a copy of the (modified) object. This enables the "chaining" of commands as follows:

.. code-block:: python

    d=PupilData.from_file("data/test.pd").lowpass_filter(3).downsample(50).blinks_detect().blinks_merge()


This command loads a data-file (`test.pd`), applies a 3Hz low-pass filter to it, downsamples the signal to 50 Hz, detects blinks in the signal and merges short, successive blinks together. The final result of this processing-pipeline is stored in object `d`. This object stores also the complete history of the operations applied to the dataset and allows to transfer it to a new dataset.

See the following page more on this: :ref:`Pipeline-based processing in pypillometry </docs/pipes.ipynb>`

Pre-processing data
-------------------

Assuming you have generated a :class:`~pypillometry.pupildata.PupilData` object, a range of pre-processing functions are available. 




Handling Blinks
^^^^^^^^^^^^^^^

:ref:`An example for how to handle blinks </docs/blinks.ipynb>`


.. autosummary::

    PupilData.blinks_detect
    PupilData.blinks_interpolate    
    PupilData.blinks_interp_mahot
    PupilData.blinks_merge
    PupilData.blinks_plot

Smoothing/low-pass filtering
^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. autosummary::

    PupilData.lowpass_filter
    PupilData.smooth_window
    PupilData.downsample

Changing/Slicing data
^^^^^^^^^^^^^^^^^^^^^

.. autosummary::

    PupilData.sub_slice
    PupilData.copy
    PupilData.scale
    PupilData.unscale
    PupilData.reset_time

Plotting/Summarizing Data
-------------------------

Plotting
^^^^^^^^

.. autosummary::

    PupilData.plot
    PupilData.plot_segments
    PupilData.blinks_plot
    plotpd
    plotpd_ia
    

Inspecting/Summarizing
^^^^^^^^^^^^^^^^^^^^^^

.. autosummary::

    PupilData.summary
    PupilData.stat_per_event 
    PupilData.get_erpd
    
Event-Related Pupil Dilation
^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Running :func:`PupilData.get_erpd` returns an Object of class :class:`ERPDSingleSubject`. This object has functions for plotting and summarising the event-related pupillary dilation. 

:ref:`Here is an example for how to work with ERPDs </docs/erpds.ipynb>`.


.. autosummary::

    PupilData.get_erpd
    
.. currentmodule:: pypillometry.erpd

.. autosummary::

    group_erpd
    ERPD.summary
    ERPD.plot

    

Baseline/Response estimation
----------------------------

.. currentmodule:: pypillometry.pupildata

.. autosummary::

    PupilData.estimate_baseline
    PupilData.estimate_response    
    PupilData.stat_per_event
    
Artificial Data
---------------

.. autosummary::

    create_fake_pupildata

